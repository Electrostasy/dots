# Prusa MK3S+ Klipper configuration for the OEM Einsy Rambo board, inspired by:
# https://github.com/dz0ny/klipper-prusa-mk3s
# https://github.com/Klipper3d/klipper/pull/4080/
[mcu]
serial: /dev/serial/by-path/platform-3f980000.usb-usb-0:1.1:1.0

[include einsy-rambo.cfg]

# Always use stealthchop for the extruder.
[tmc2130 extruder]
stealthchop_threshold: 999999

# ADXL345 accelerometer is connected to a Waveshare RP2040-Zero MCU board.
[mcu adxl_controller]
serial: /dev/serial/by-path/platform-3f980000.usb-usb-0:1.3:1.0

# Needs a logical name because for some reason, even if we have only one ADXL345,
# we cannot omit the CHIP= parameter.
[adxl345 xy]
cs_pin: adxl_controller:gpio1
spi_bus: spi0a
axes_map: -x, y, z

[resonance_tester]
accel_chip_x: adxl345 xy
accel_chip_y: adxl345 xy
probe_points:
  127, 105, 20

[output_pin power_mode]
pin: adxl_controller:gpio23

# SK6812 LED strip is controlled by a Waveshare RP2040-Zero MCU board.
[mcu led_controller]
serial: /dev/serial/by-path/platform-3f980000.usb-usb-0:1.4:1.0

[neopixel enclosure]
pin: led_controller:gpio0
chain_count: 122
color_order: GRBW

[delayed_gcode enable_leds_at_startup]
initial_duration: 0.01
gcode:
  SET_LED LED=enclosure RED=0.0 GREEN=0.0 BLUE=0.0 WHITE=0.0 TRANSMIT=0
  {% for i in range(1,122) %}
    SET_LED LED=enclosure RED=0.0 GREEN=0.0 BLUE=0.0 WHITE=0.2 INDEX={i} TRANSMIT=1
  {% endfor %}
  SET_LED LED=enclosure RED=0.0 GREEN=0.0 BLUE=0.0 WHITE=0.2 TRANSMIT=1

# The original extruder is replaced with an E3D Hemera XS extruder on a
# BearMera mount.
[include e3d-hemera-xs.cfg]

# Calibration:
#  PID_CALIBRATE HEATER=extruder TARGET=170
[extruder]
control: pid
pid_Kp: 24.623
pid_Ki: 1.978
pid_Kd: 76.639

# Calibration:
#  PID_CALIBRATE HEATER=heater_bed TARGET=60
[heater_bed]
control: pid
pid_Kp: 52.232
pid_Ki: 0.577
pid_Kd: 1183.053

# https://www.klipper3d.org/Config_Reference.html?h=respond#resonance-compensation
# Measure the resonances for X and Y axis by remounting the accelerometer to
# the bed and toolhead, each time running the TEST_RESONANCES macro:
#  TEST_RESONANCES AXIS=X
#  TEST_RESONANCES AXIS=Y
# Process the results used for calibrating input shaper on another PC, because
# otherwise Python is killed by OOM on the Pi 02W:
#  klipper-calibrate-shaper /tmp/resonances_x_*.csv -o /tmp/shaper_calibrate_x.png
#  klipper-calibrate-shaper /tmp/resonances_y_*.csv -o /tmp/shaper_calibrate_y.png
[input_shaper]
shaper_type_x: mzv
shaper_freq_x: 36.4
shaper_type_y: mzv
shaper_freq_y: 45.6

[printer]
max_accel: 3900

[probe]
z_offset: 1.841

[respond]
default_type: command

[force_move]
enable_force_move: TRUE

[gcode_arcs]
resolution: 0.25

[include client.cfg]
[include macros.cfg]
