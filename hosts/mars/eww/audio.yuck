; vim: set filetype=clojure:

(defvar SHOW_AUDIO_DROPDOWN false)
(defvar SHOW_AUDIO_DROPDOWN_SHORT false)
(deflisten AUDIO_NODES "./scripts/audioctl.fish -n")

(deflisten DEFAULT_PLAYBACK "./scripts/audioctl.fish -p")
(deflisten DEFAULT_RECORDING "./scripts/audioctl.fish -r")
(defvar SHOW_PLAYBACK_DROPDOWN false)

(defwidget audio-node [id name volume mute]
  (box :orientation "vertical" :space-evenly false
       :class "audio-node"
    (label :halign "start"
           :text name)
    ; Dragging is jittery because the list is rebuilt each tick
    (box :space-evenly false
      (volume-indicator :value { volume * 100.0 }
                        :mute mute)
      (scale :hexpand true :halign "fill"
             :value { volume * 100.0 }
             :min 0.0
             :max 101.0
             :onchange "./scripts/audioctl.fish -o ${id} -v {}"
             :class "audio-scale"))))

(defwidget audio-nodes-list []
  (box :orientation "vertical"
    (for node in AUDIO_NODES
      (audio-node :id { node["id"] }
                  :name { node["name"] }
                  :volume { node["volume"] }
                  :mute { node["mute"] }))))

(defwidget volume-indicator [value mute]
  (label :text { mute || mute == "true" ? "ﱝ"
               : value == 0 ? "婢"
               : value > 0 && value < 31 ? "奄"
               : value > 30 && value < 61 ? "奔"
               : "墳" }
         :class "volume-indicator"))

(defwindow audio :monitor 1
                 :geometry (geometry :y "-24px"
                                     :width "192px"
                                     :height "24px"
                                     :anchor "top left")
                 :stacking "fg"
  (box :orientation "vertical" :space-evenly false :class "audio"
    (eventbox :cursor "pointer" :height 24
      (button :onclick "eww update SHOW_AUDIO_DROPDOWN=false; ./scripts/ewwctl.fish -v -n SHOW_AUDIO_DROPDOWN_SHORT"
              :onrightclick "eww update SHOW_AUDIO_DROPDOWN_SHORT=false; ./scripts/ewwctl.fish -v -n SHOW_AUDIO_DROPDOWN"
              :class "audio-button"
        "audio"))
    (revealer :transition "slidedown"
              :reveal SHOW_AUDIO_DROPDOWN_SHORT
              :duration "250ms"
      (box :class "audio-dropdown-short" :height 192
        (box :orientation "vertical" :space-evenly false
          (scale :vexpand true :valign "fill"
                 :value { DEFAULT_PLAYBACK["volume"] / 100.0 }
                 :min 0.0
                 :max 101.0
                 :flipped true
                 :orientation "vertical"
                 :onchange "./scripts/audioctl.fish -v {} -o ${ DEFAULT_PLAYBACK['id'] }"
                 :class "audio-scale")
          (label :text "Playback"))
        (box :orientation "vertical" :space-evenly false
          (scale :vexpand true :valign "fill"
                 :value { DEFAULT_RECORDING["volume"] / 100.0 }
                 :min 0.0
                 :max 101.0
                 :flipped true
                 :orientation "vertical"
                 :onchange "./scripts/audioctl.fish -v {} -o ${ DEFAULT_RECORDING['id'] }"
                 :class "audio-scale")
          (label :text "Recording"))))
    (revealer :transition "slidedown"
              :reveal SHOW_AUDIO_DROPDOWN
              :duration "250ms"
      (box :class "audio-dropdown"
        (audio-nodes-list)))))
